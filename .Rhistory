abline(v= eigen_values)
1/min(eigen_values)
1/max(eigen_values)
#We will look at a Rho between these two
c(1/min(eigen_values),1/max(eigen_values))
res_w <- eigen(W)
eigen_values <- res_w$values
#These are all the values you can't take for rho
plot(eigen_values, rep(0, length(eigen_values)))
abline(v= eigen_values)
#We will look at a Rho between these two
c(1/min(eigen_values),1/max(eigen_values))
abline(v=1/min(eigen_values, col="red"))
abline(v=1/min(eigen_values), col="red"))
abline(v=1/max(eigen_values), col="red"))
abline(v=1/min(eigen_values), col="red")
abline(v=1/max(eigen_values), col="red")
res_w <- eigen(W)
eigen_values <- res_w$values
#These are all the values you can't take for rho
plot(1/eigen_values, rep(0, length(eigen_values)))
abline(v= 1/eigen_values)
#We will look at a Rho between these two
c(1/min(eigen_values),1/max(eigen_values))
abline(v=1/min(eigen_values), col="red")
abline(v=1/max(eigen_values), col="red")
X <- columbus$INC
knitr::opts_chunk$set(echo = TRUE)
alcohol_t1 %>% quantile()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(RColorBrewer)
library(ggplot2)
library(sna)
load("C:/Users/Rodrigue/Desktop/X/rodrigue/Master/Master 2/S2/Graph analysis/Practical 3-20240227/Data/Glasgow-friendship.RData")
selection <- !is.na(friendship.1[,1]) & friendship.1[,1]!=10
glasgow_adj <- friendship.1[selection,selection]
glasgow_adj[glasgow_adj==2] <- 1
glasgow_net<-graph_from_adjacency_matrix(glasgow_adj)
load("C:/Users/Rodrigue/Desktop/X/rodrigue/Master/Master 2/S2/Graph analysis/Practical 3-20240227/Data/Glasgow-substances.RData")
alcohol_t1 <- alcohol[attributes(glasgow_adj)$dimnames[[1]],1]
alcohol_t1[is.na(alcohol_t1)] <- median(na.omit(alcohol_t1))
glasgow_net$layout <- layout_nicely(glasgow_net)
v_colors <- scales::dscale(alcohol_t1 %>% cut(4), sequential_pal)
plot(
glasgow_net,
vertex.size = 5,
edge.size = 3,
vertex.label.cex = 0.7,
vertex.color = v_colors,
vertex.frame.color = v_colors,
vertex.label.color = "black",
edge.color = "gray",
vertex.label.dist = 0.5,
edge.width = 0.2,
edge.arrow.size = 0.35
)
eiIndex <- function(adj, attribute) {
same <- outer(attribute, attribute, "==")
n_int <- sum(adj * same)
n_ext <- sum(adj) - n_int
return((n_ext-n_int)/sum(adj))
}
alcohol_t1 %>% quantile()
alcohol_b <- ifelse(alcohol_t1 >= 2, 1, 0)
ei_alcohol <- eiIndex(glasgow_adj, alcohol_b)
ei_alcohol
newIndex <- function(adj, attribute){
# YOUR CODE HERE
return(new)
}
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- sum(unlist(sample_graphs_ei) <= ei_alcohol)/1000
ei_p_value
ei_p_value <- sum(unlist(sample_graphs_ei) != ei_alcohol)/1000
ei_p_value
ei_p_value <- sum(unlist(sample_graphs_ei) == ei_alcohol)/1000
ei_p_value
ei_p_value <- sum(unlist(sample_graphs_ei) != ei_alcohol)/1000
ei_p_value
alcohol_b <- ifelse(alcohol_t1 >= 3, 1, 0)
ei_alcohol <- eiIndex(glasgow_adj, alcohol_b)
ei_alcohol
alcohol_b <- ifelse(alcohol_t1 >= 2, 1, 0)
ei_alcohol <- eiIndex(glasgow_adj, alcohol_b)
ei_alcohol
alcohol_b <- ifelse(alcohol_t1 >= 3, 1, 0)
ei_alcohol <- eiIndex(glasgow_adj, alcohol_b)
ei_alcohol
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- sum(unlist(sample_graphs_ei) > ei_alcohol)/1000
ei_p_value <- sum(unlist(sample_graphs_ei) >= ei_alcohol)/1000
ei_p_value <- sum(unlist(sample_graphs_ei) >= ei_alcohol)/1000
ei_p_value
alcohol_b <- ifelse(alcohol_t1 >= 2, 1, 0)
ei_alcohol <- eiIndex(glasgow_adj, alcohol_b)
ei_alcohol
newIndex <- function(adj, attribute){
# YOUR CODE HERE
return(new)
}
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- sum(unlist(sample_graphs_ei) != ei_alcohol)/1000
ei_p_value
ei_p_value <- sum(unlist(sample_graphs_ei) != ei_alcohol)/1000
ei_p_value
ei_p_value <- sum(unlist(sample_graphs_ei) == ei_alcohol)/1000
ei_p_value
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
set.seed(112233)
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
set.seed(11223)
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
set.seed(1122)
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
set.seed(112233)
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
alcohol_b <- ifelse(alcohol_t1 >= 2, 1, 0)
ei_alcohol <- eiIndex(glasgow_adj, alcohol_b)
ei_alcohol
set.seed(112233)
sample_graphs <- lapply(1:1000,sample_gnm,n=vcount(glasgow_net), m=ecount(glasgow_net))
sample_adjacency <- lapply(sample_graphs,as_adjacency_matrix)
sample_graphs_ei <- lapply(sample_adjacency, FUN = function(x){return(eiIndex(x,alcohol_b))})
ggplot(data = data.frame(ei = unlist(sample_graphs_ei))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=ei_alcohol), color="green")+
ggtitle("CUG test for ei alcohol consumption in Glasgow","reference model: Erdös-Renyi")+
theme_minimal()
ei_p_value <- mean(unlist(sample_graphs_ei) == ei_alcohol)
ei_p_value
range <- diff(range(alcohol_t1))
alcohol_diff <- (range -2*as.matrix(dist(alcohol_t1))) / range
qap_reg <- netlogit(glasgow_adj,list(alcohol_diff),mode='graph',nullhyp = 'qapy',reps=100)
summary(qap_reg)
simulate_abm_complex <- function(g, p, seeds, max_steps) {
# Initialize vectors to store results
drinking_count <- numeric(max_steps)
steps_needed <- numeric(vcount(g))
# Set initial seed actors
drinking_actors <- seeds
drinking_count[1] <- length(seeds)
steps_needed[seeds] <- 1
# Initialize probabilities for each actor
probabilities <- numeric(vcount(g))
neighbors <- lapply(1:vcount(g), neighbors, graph = g, mode = "out")
#############
#To_continue#
#############
for (step in 2:max_steps) {
nodrinking_actors <- setdiff(1:vcount(g), drinking_actors)
for (actor in nodrinking_actors) {
neighbors_actor <- neighbors[[actor]]
if(length(neighbors_actor) > 0) {
probabilities[actor] <- ifelse(sum(drinking_actors %in% neighbors_actor) / length(neighbors_actor) > p, 1,0)
} else {
probabilities[actor] <- 0
}
}
new_drinking <- nodrinking_actors[runif(length(nodrinking_actors)) < probabilities[nodrinking_actors]]
drinking_actors <- union(drinking_actors, new_drinking)
drinking_count[step] <- length(drinking_actors)
# Update steps_needed for newly informed actors
newly_drinking_steps <- rep(step, length(new_drinking))
steps_needed[new_drinking] <- newly_drinking_steps
# Check if all actors are informed and stop if true
if (length(drinking_actors) == vcount(g)) {
drinking_count <- drinking_count[1:step]
break
}
}
# Return the results
return(list(drinking_count = drinking_count, steps_needed = steps_needed))
}
simulate_abm_complex(glasgow_net,0.5,seeds = 5,10)
simulate_abm_complex(glasgow_net,0.5,seeds = 5,20)
attributes(alcohol)
seeds=which(attributes(alcohol)$dimnames[[1]] == 5)
simulate_abm_complex(glasgow_net,0.5,seeds = seeds,1000)
attributes(glasgow_net)
glasgow_net
simulate_abm_complex(glasgow_net,0.5,seeds = 5,1000)
seeds=which(attributes(alcohol)$dimnames[[1]] == 5)[1]
simulate_abm_complex(glasgow_net,0.5,seeds = seeds,1000)
seeds=which(attributes(alcohol_t1)$dimnames[[1]] == 5)[1]
simulate_abm_complex(glasgow_net,0.5,seeds = seeds,1000)
seeds=which(attributes(alcohol_t1)$dimnames[[1]] == 5)
simulate_abm_complex(glasgow_net,0.5,seeds = seeds,1000)
V(glasgow_net)
V(glasgow_net)==which(alcohol_t1==5)
V(glasgow_net)%in%which(alcohol_t1==5)
which(V(glasgow_net)==which(alcohol_t1==5))
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))
lesmis_abm_si <- simulate_abm_si(g=lesmis_net, p=p, seed=seed, max_steps=1000)
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))
glasgow_complex <- simulate_abm_si(g=lesmis_net, p=p, seed=seed, max_steps=1000)
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))
glasgow_complex <- simulate_abm_complex(g=lesmis_net, p=p, seed=seed, max_steps=1000)
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))
glasgow_complex <- simulate_abm_complex(g=glasgow_net, p=p, seed=seed, max_steps=1000)
ggplot(data.frame(time = 1:length(glasgow_complex$drinking_count),
n_drinking = glasgow_complex$drinking_count)) +
geom_line(aes(x=time, y=n_drinking)) +
ggtitle("Evolution through simulated time of the number of actors informed \n with p = 0.5") +
theme_minimal()
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))[1]
glasgow_complex <- simulate_abm_complex(g=glasgow_net, p=p, seed=seed, max_steps=1000)
ggplot(data.frame(time = 1:length(glasgow_complex$drinking_count),
n_drinking = glasgow_complex$drinking_count)) +
geom_line(aes(x=time, y=n_drinking)) +
ggtitle("Evolution through simulated time of the number of actors informed \n with p = 0.5") +
theme_minimal()
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))[1]
glasgow_complex <- simulate_abm_complex(g=glasgow_net, p=p, seed=seed, max_steps=1000)
ggplot(data.frame(time = 1:length(glasgow_complex$drinking_count),
n_drinking = glasgow_complex$drinking_count)) +
geom_line(aes(x=time, y=n_drinking)) +
ggtitle("Evolution through simulated time of the number of actors drinking \n with p = 0.5") +
theme_minimal()
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))[2]
glasgow_complex <- simulate_abm_complex(g=glasgow_net, p=p, seed=seed, max_steps=1000)
ggplot(data.frame(time = 1:length(glasgow_complex$drinking_count),
n_drinking = glasgow_complex$drinking_count)) +
geom_line(aes(x=time, y=n_drinking)) +
ggtitle("Evolution through simulated time of the number of actors drinking \n with p = 0.5") +
theme_minimal()
set.seed(112233)
p <- 0.5
seed <- which(V(glasgow_net)==which(alcohol_t1==5))
glasgow_complex <- simulate_abm_complex(g=glasgow_net, p=p, seed=seed, max_steps=1000)
ggplot(data.frame(time = 1:length(glasgow_complex$drinking_count),
n_drinking = glasgow_complex$drinking_count)) +
geom_line(aes(x=time, y=n_drinking)) +
ggtitle("Evolution through simulated time of the number of actors drinking \n with p = 0.5") +
theme_minimal()
INC_lag <- lag.listw(columbus_listw, columbus$INC)
HOVAL_lag <- lag.listw(columbus_listw, columbus$HOVAL)
moran_scatter_plot(X = residuals(olm),
geo = columbus,
X_name = "X")
olm <- lm( CRIME ~ INC + HOVAL, data=columbus)
summary(olm)
moran_scatter_plot(X = residuals(olm),
geo = columbus,
X_name = "X")
my_res<- residuals(olm)
moran.plot(my_res, columbus_listw)
moran.test(my_res,columbus_listw)
lm.moran.test(olm,columbus_listw)
lm.morantest(olm,columbus_listw)
#First alternative: use SLX
olm <- lm( CRIME ~ INC + HOVAL + INC_lag, data=columbus)
summary(olm)
#First alternative: use SLX
olm <- lm( CRIME ~ INC + HOVAL + INC_lag + HOVAL_lag, data=columbus)
summary(olm)
#First alternative: use SLX
slx <- lm( CRIME ~ INC + HOVAL + INC_lag + HOVAL_lag, data=columbus)
summary(slx)
INC_lag <- lag.listw(columbus_listw, columbus$INC)
HOVAL_lag <- lag.listw(columbus_listw, columbus$HOVAL)
olm <- lm( CRIME ~ INC + HOVAL, data=columbus)
summary(olm)
moran_scatter_plot(X = residuals(olm),
geo = columbus,
X_name = "X")
my_res<- residuals(olm)
moran.plot(my_res, columbus_listw)
lm.morantest(olm,columbus_listw)
#There is spatial autocorrelation in the residuals
#First alternative: use SLX
slx <- lm( CRIME ~ INC + HOVAL + INC_lag + HOVAL_lag, data=columbus)
summary(slx)
#Income appears twice. In one, it's a direct impact. In lag, it's indirect impact.
moran.plot(residuals(slx), columbus_listw)
#Income appears twice. In one, it's a direct impact. In lag, it's indirect impact.
spatialreg::lmSLX(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
#Income appears twice. In one, it's a direct impact. In lag, it's indirect impact.
slx1 <- spatialreg::lmSLX(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
impacts(slx1)
lm.morantest(slx1,columbus_listw)
lag <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
impacts(lag)
lag
impacts(lag)
summary(lag)
#good model
AIC(olm)
INC_lag <- lag.listw(columbus_listw, columbus$INC)
HOVAL_lag <- lag.listw(columbus_listw, columbus$HOVAL)
olm <- lm( CRIME ~ INC + HOVAL, data=columbus)
summary(olm)
moran_scatter_plot(X = residuals(olm),
geo = columbus,
X_name = "X")
my_res<- residuals(olm)
moran.plot(my_res, columbus_listw)
lm.morantest(olm,columbus_listw)
#There is spatial autocorrelation in the residuals
############################
#First alternative: use SLX#
############################
slx <- lm( CRIME ~ INC + HOVAL + INC_lag + HOVAL_lag, data=columbus)
summary(slx)
#Income appears twice. In one, it's a direct impact. In lag, it's indirect impact.
slx1 <- spatialreg::lmSLX(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
impacts(slx1)
lm.morantest(slx1,columbus_listw)
# p-value = 0.003007 : We still have saptial autocorrelation, so let's try something else
#############################
#Second alternative: use SAR#
#############################
lag <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
summary(lag)
#good model
AIC(olm)
#Higher than lag
#lag better
#Higher than lag
#lag better
impacts(lag, listw=columbus_listw)
#If income increase by 1000, CRIME decreases by -1.1 on my district (direct impact),
#but also accumulate -0.71 decrease on the other neighborhood (ex: -0.2,-0.1,-... with a sum of -0.71)
imp <- impacts(lag, listw=columbus_listw, R=100)
summary(impact, zstats = TRUE)
summary(imp, zstats = TRUE)
#spatial durbin model: add Wx in results, with the same interpretation
dsm <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, DURBIN=TRUE)
#spatial durbin model: add Wx in results, with the same interpretation
sdm <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, DURBIN=TRUE)
?lagsarlm
#spatial durbin model: add Wx in results, with the same interpretation
sdm <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, Durbin =TRUE)
summary(sdm)
impacts(sdm, listw = columbus_listw)
impacts(sdm, listw = columbus_listw)
imp_sdm <- impacts(sdm, listw = columbus_listw)
summary(imp_sdm, zstats=TRUE)
imp_sdm <- impacts(sdm, listw = columbus_listw, R=200)
summary(imp_sdm, zstats=TRUE)
sem <- spatialreg::errorsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, Durbin =TRUE)
summary(sem)
impacts(sem, listw = columbus_listw)
imp_sem <- impacts(sem, listw = columbus_listw, R=200)
summary(imp_sem, zstats=TRUE)
#Spatial error model
sem <- spatialreg::errorsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, Durbin =TRUE)
summary(sem)
#better than olm since spatial autocorrelation lambda is significative here
impacts(sem, listw = columbus_listw)
#Spatial error model
sem <- spatialreg::errorsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, Durbin =TRUE)
summary(sem)
#Spatial error model
sem <- spatialreg::errorsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
summary(sem)
#better than olm since spatial autocorrelation lambda is significative here
impacts(sem, listw = columbus_listw)
imp_sem <- impacts(sem, listw = columbus_listw, R=200)
summary(imp_sem, zstats=TRUE)
#better than olm since spatial autocorrelation lambda is significative here
impacts(sem, listw = columbus_listw)
c(olm = AIC(olm)
sar = AIC(lag)
c(olm = AIC(olm),
sar = AIC(lag),
sdm = AIC(sdm),
sem = AIC(sem))
res_test <- lm.LMtests(olm,sar)
res_test <- lm.LMtests(olm,lag)
res_test <- lm.LMtests(olm,
)
res_test <- lm.LMtests(olm,
columbus_listw,test = "all")
res_test
summary(res_test)
source("C:/Users/Rodrigue/Desktop/X/rodrigue/Master/Master 2/S2/Spatial Econometrics/TP/Exo_list_3.R")
################
INC_lag <- lag.listw(columbus_listw, columbus$INC)
HOVAL_lag <- lag.listw(columbus_listw, columbus$HOVAL)
olm <- lm( CRIME ~ INC + HOVAL, data=columbus)
summary(olm)
moran_scatter_plot(X = residuals(olm),
geo = columbus,
X_name = "X")
my_res<- residuals(olm)
moran.plot(my_res, columbus_listw)
lm.morantest(olm,columbus_listw)
#There is spatial autocorrelation in the residuals
############################
#First alternative: use SLX#
############################
slx <- lm( CRIME ~ INC + HOVAL + INC_lag + HOVAL_lag, data=columbus)
summary(slx)
#Income appears twice. In one, it's a direct impact. In lag, it's indirect impact.
slx1 <- spatialreg::lmSLX(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
impacts(slx1)
lm.morantest(slx1,columbus_listw)
# p-value = 0.003007 : We still have saptial autocorrelation, so let's try something else
#############################
#Second alternative: use SAR#
#############################
lag <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
summary(lag)
#good model
AIC(olm)
#Higher than lag
#lag better
impacts(lag, listw=columbus_listw)
#If income increase by 1000, CRIME decreases by -1.1 on my district (direct impact),
#but also accumulate -0.71 decrease on the other neighborhood (ex: -0.2,-0.1,-... with a sum of -0.71)
imp <- impacts(lag, listw=columbus_listw, R=100)
summary(imp, zstats = TRUE) #More details
#spatial durbin model: add Wx in results, with the same interpretation
sdm <- spatialreg::lagsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw, Durbin =TRUE)
summary(sdm)
impacts(sdm, listw = columbus_listw)
imp_sdm <- impacts(sdm, listw = columbus_listw, R=200)
summary(imp_sdm, zstats=TRUE)
#Spatial error model
sem <- spatialreg::errorsarlm(CRIME ~INC + HOVAL, data=columbus,listw = columbus_listw)
summary(sem)
#better than olm since spatial autocorrelation lambda is significative here
impacts(sem, listw = columbus_listw)
c(olm = AIC(olm),
sar = AIC(lag),
sdm = AIC(sdm),
sem = AIC(sem))
source("C:/Users/Rodrigue/Desktop/X/rodrigue/Master/Master 2/S2/Spatial Econometrics/TP/Exo_list_3.R")
setwd("C:/Users/Rodrigue/Desktop/X/rodrigue/Master/Master 2/S2/Graph analysis/Project")
read.delim("flandreau_jobst_internationalcurrencies_data.txt")
currencies_data <- read.delim("flandreau_jobst_internationalcurrencies_data.txt")
currencies_data <- read.delim2("flandreau_jobst_internationalcurrencies_data.txt")
currencies_data <- read.delim("flandreau_jobst_internationalcurrencies_data.txt", skip = 5)
currencies_data <- read.delim("flandreau_jobst_internationalcurrencies_data.txt", skip = 4)
currencies_data <- read.delim("flandreau_jobst_internationalcurrencies_data.txt", skip = 9)
View(currencies_data)
