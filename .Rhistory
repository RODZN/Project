ggtitle("Degree Centrality vs. being a colonizer")
# Apparently, colonizers have a high degree centrality
# That was expected since a colonized country have many economic, financial, and political
# relations withthe colonizer, and so they would use the colonizer's currency for their trades,
# especially since colonizer usually tend to export and import from the colony.
graph_L <- laplacian_matrix(graph, normalized = T, sparse = F)
ggplot(as_tibble(eigen(graph_L)$values)) +
geom_point(aes(x=1:length(value),y=sort(value))) +
labs(x="", y="Eigenvalue", title = "Eigenvalues of L_N")
graph_L <- laplacian_matrix(graph, normalized = T, sparse = F)
ggplot(as_tibble(eigen(graph_L)$values)) +
geom_point(aes(x=1:length(value),y=sort(value))) +
labs(x="", y="Eigenvalue", title = "Eigenvalues of L_N")
K = 5
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
graph_spectral
K = 5
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n(Modularity =", round(modularity(graph_spectral), digits=2),"| Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
K = 2
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
K = 2
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
K = 2
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
K = 3
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
main=paste("Spectral approach\n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
plot(graph,
mark.groups = graph_greedy,
vertex.size=3,
vertex.label.cex=0.4,
vertex.color=graph_greedy$membership,
vertex.label.color="black",
vertex.label.dist=1,
main=paste("Louvain approach\n(Modularity =", round(modularity(graph_greedy), digits=2),"| Clusters =",max(graph_greedy$membership),")"),
edge.color = rgb(0,0,0,.25))
plot(graph,
mark.groups = graph_spectral,
vertex.size=3,
vertex.label.cex=0.4,
vertex.color=graph_spectral,
vertex.label.color="black",
vertex.label.dist=1,
main=paste("Louvain approach \n Clusters =",max(graph_greedy),")"),
edge.color = rgb(0,0,0,.25))
plot(graph,
mark.groups = graph_spectral,
vertex.size=3,
vertex.label.cex=0.4,
vertex.color=graph_spectral,
vertex.label.color="black",
vertex.label.dist=1,
main=paste("Louvain approach \n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,0,.25))
plot(graph,
mark.groups = graph_spectral,
vertex.size=3,
vertex.label.cex=0.4,
vertex.color=graph_spectral,
vertex.label.color="black",
vertex.label.dist=1,
main=paste("Louvain approach \n Clusters =",max(graph_spectral),")"),
edge.color = rgb(0,0,.25))
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
edge.color = rgb(0,0,0,.25))
plot(graph,
vertex.size=1,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
edge.color = rgb(0,0,0,.25))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(igraphdata)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
#Importing the Data
setwd("C:/Users/Rodrigue/Desktop/X/rodrigue/Master/Master 2/S2/Graph analysis/Project")
currencies_data <- read.delim("flandreau_jobst_internationalcurrencies_data.txt", skip = 9)
#Countries Informations
countries_infos <- currencies_data[,c("country_A","gold","debtburden","rlong","rshort1900","rshort1890","rgdp","rgdpcap","poldemo","coverage")]
countries_infos <- unique(countries_infos)
#Finding if a country is a colonizer of other countries
colonizer <- graph_data[,c("country_B","colony")]
grouped_colonizer <- colonizer %>%
group_by(country_B) %>%
summarize(Sum_colony = sum(colony))
grouped_colonizer$is_colonizer <- ifelse(grouped_colonizer$Sum_colony != 0 ,1 ,0)
# Add the variable is_colonizer to countries_info
countries_infos <- countries_infos %>%
left_join(grouped_colonizer[,c("country_B","is_colonizer")], by = c("country_A" = "country_B"))
graph_data <- currencies_data[currencies_data$bitrade != 0 ,c("country_A","country_B","bitrade","colony")]
quantile(graph_data$bitrade)
breakpoints <- c(-Inf, 12000, 51000, Inf)
graph_data$category <- cut(graph_data$bitrade, breaks = breakpoints, labels = c("green", "blue", "red"))
graph <- graph_from_data_frame(graph_data,directed = TRUE, vertices=countries_infos)
E(graph)$weight <- graph_data$bitrade
E(graph)$colony <- graph_data$colony
graph$layout <- layout_nicely(graph)
par(mfrow=c(1,1), mar=rep(0,4))
plot(
graph,
vertex.size = 3,
vertex.color = "blue",
vertex.frame.color = "blue",
vertex.label.cex = 0.8,
vertex.label.color = "black",
vertex.label.dist = 0.3,
edge.width = 0.1,
edge.cex = 1,
edge.color = as.character(graph_data$category),
)
c_page_rank <- page_rank(graph,directed = T, weights = E(graph)$weight)$vector
df <- data.frame(rgdp = V(graph)$rgdp,
gold = V(graph)$gold,
page_rank = c_page_rank)
ggplot(df, aes(x = page_rank, y = gold)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)+
theme_minimal()+
ggtitle("Pagerank Centrality vs. gold convertability")
ggplot(df, aes(x = page_rank, y = rgdp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)+
theme_minimal()+
ggtitle("Pagerank Centrality vs. Real GDP")
cor.test(c_page_rank, V(graph)$gold)
cor.test(c_page_rank, V(graph)$rgdp)
par(mfrow=c(1,1), mar=rep(0,4))
colors_rgdp <- scales::dscale(V(graph)$rgdp %>% cut(9), sequential_pal)
sizes_pagerank <- (1:9)[c_page_rank %>% cut(9)] + 1
plot(graph,
vertex.size = sizes_pagerank,
vertex.color = colors_rgdp,
vertex.label = NA,
edge.color = rgb(0,0,0,.15),
edge.arrow.size = 0.2,
)
c_degree <- degree(graph)
df_degree <- data.frame(is_colonizer = V(graph)$is_colonizer,
degree = c_degree)
ggplot(df_degree, aes(x = degree, y = is_colonizer)) +
geom_point() +
theme_minimal()+
ggtitle("Degree Centrality vs. being a colonizer")
graph_L <- laplacian_matrix(graph, normalized = T, sparse = F)
ggplot(as_tibble(eigen(graph_L)$values)) +
geom_point(aes(x=1:length(value),y=sort(value))) +
labs(x="", y="Eigenvalue", title = "Eigenvalues of L_N")
K = 2
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=1,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
edge.color = rgb(0,0,0,.25))
K = 3
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
plot(graph,
vertex.size=3,
vertex.label.cex=0.8,
vertex.color=graph_spectral,
vertex.label.color=graph_spectral,
edge.color = rgb(0,0,0,.25))
graph_L <- laplacian_matrix(graph, normalized = T, sparse = F, weights = E(graph_net)$weight)
graph_L <- laplacian_matrix(graph, normalized = T, sparse = F, weights = E(graph)$weight)
ggplot(as_tibble(eigen(graph_L)$values)) +
geom_point(aes(x=1:length(value),y=sort(value))) +
labs(x="", y="Eigenvalue", title = "Eigenvalues of L_N")
graph_L <- laplacian_matrix(graph, normalized = T, sparse = F, weights = E(graph)$weight)
ggplot(as_tibble(eigen(graph_L)$values)) +
geom_point(aes(x=1:length(value),y=sort(value))) +
labs(x="", y="Eigenvalue", title = "Eigenvalues of L_N")
K = 3
vect_clust <- eigen(graph_L)$vectors
vect_clust <- vect_clust[,ncol(vect_clust)-0:(K-1)]
graph_spectral <- kmeans(vect_clust, centers=K)$cluster
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(igraphdata)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
library(sna)
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(lesmis_adj, FUN=gtrans, mode="graph", cmode="edges", reps = 1000)
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gtrans, mode="graph", cmode="edges", reps = 1000)
cugtest_trans
?cug.test
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="graph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(degree(graph))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="graph", cmode="edges", reps = 1000)
cugtest_deg
gdeg <- function(graph) {
return(mean(degree(graph)))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="graph", cmode="edges", reps = 1000)
cugtest_deg
gdeg <- function(graph) {
return(mean(degree(graph)))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
cugtest_deg
gdeg <- function(graph) {
return(degree(graph))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
?degree
c_degree <- degree(graph, mode = "all")
c_degree <- degree(graph, mode = "out")
c_degree <- igraph.degree(graph, mode = "out")
c_degree <- igraph::degree(graph, mode = "out")
df_degree <- data.frame(is_colonizer = V(graph)$is_colonizer,
degree = c_degree)
ggplot(df_degree, aes(x = degree, y = is_colonizer)) +
geom_point() +
theme_minimal()+
ggtitle("Degree Centrality vs. being a colonizer")
c_degree <- igraph::degree(graph, mode = "in")
df_degree <- data.frame(is_colonizer = V(graph)$is_colonizer,
degree = c_degree)
ggplot(df_degree, aes(x = degree, y = is_colonizer)) +
geom_point() +
theme_minimal()+
ggtitle("Degree Centrality vs. being a colonizer")
c_degree <- igraph::degree(graph, mode = "all")
df_degree <- data.frame(is_colonizer = V(graph)$is_colonizer,
degree = c_degree)
ggplot(df_degree, aes(x = degree, y = is_colonizer)) +
geom_point() +
theme_minimal()+
ggtitle("Degree Centrality vs. being a colonizer")
gdeg <- function(graph) {
return(degree(graph, mode = "total"))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(degree(graph, mode = "all"))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(degree(graph))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
cugtest_deg
gdeg <- function(graph) {
return(degree(graph))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=edge_density, mode="digraph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(degree(graph))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph, FUN=edge_density, mode="digraph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(degree(graph))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=edge_density, mode="digraph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(sum(degree(graph)))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=edge_density, mode="digraph", cmode="edges", reps = 1000)
gdeg <- function(graph) {
return(sum(degree(graph)))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
cugtest_deg
gdeg <- function(graph) {
return(sum(degree(graph, mode="all")))
}
graph_adj <- as.matrix(as_adjacency_matrix(graph))
cugtest_deg <- cug.test(graph_adj, FUN=gdeg, mode="digraph", cmode="edges", reps = 1000)
? degree
eiIndex <- function(adj, attribute){
same <- outer(attribute, attribute, "==")
nInternal <- sum(adj * same)
nExternal <- sum(adj) - nInternal
ei <- (nExternal - nInternal) / sum(adj)
return(ei)
}
View(countries_infos)
graph_adj <- as.matrix(as_adjacency_matrix(graph))
eiIndex(graph_adj,V(graph)$is_colonizer)
eiIndex(graph_adj,V(graph)$gold)
graph_adj <- as.matrix(as_adjacency_matrix(graph))
is_colonizer_ei <- eiIndex(graph_adj,V(graph)$is_colonizer)
graph_adj <- as.matrix(as_adjacency_matrix(graph))
is_colonizer_ei <- eiIndex(graph_adj,V(graph)$is_colonizer)
is_colonizer_ei
gold_ei <- eiIndex(graph_adj,V(graph)$gold)
gold_ei
erdosgraphs <- lapply(1:1000, sample_gnm, n= vcount(graph), m = ecount(graph))
erdosadjs <- lapply(graph, as_adjacency_matrix)
erdosgraphs <- lapply(1:1000, sample_gnm, n= vcount(graph), m = ecount(graph))
erdosadjs <- lapply(erdosgraphs, as_adjacency_matrix)
erdosgraphs_is_colonizer <- lapply(erdosadjs, FUN = function(x){return(eiIndex(x,V(graph)$is_colonizer))})
erdosgraphs_gold <- lapply(erdosadjs, FUN = function(x){return(newIndex(x,V(graph)$gold))})
erdosgraphs <- lapply(1:1000, sample_gnm, n= vcount(graph), m = ecount(graph))
erdosadjs <- lapply(erdosgraphs, as_adjacency_matrix)
erdosgraphs_is_colonizer <- lapply(erdosadjs, FUN = function(x){return(eiIndex(x,V(graph)$is_colonizer))})
erdosgraphs_gold <- lapply(erdosadjs, FUN = function(x){return(eiIndex(x,V(graph)$gold))})
ggplot(data = data.frame(ei = unlist(erdosgraphs_gold))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=gold_ei), color="red")+
ggtitle("CUG test for the EI index for gold convertability (reference model: Erdös-Renyi)")+
theme_minimal()
ggplot(data = data.frame(ei = unlist(erdosgraphs_gold))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=gold_ei), color="red")+
ggtitle("CUG test for the EI index for gold convertability (reference model: Erdös-Renyi)")+
theme_minimal()
ggplot(data = data.frame(ei = unlist(erdosgraphs_is_colonizer))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=is_colonizer_ei), color="red")+
ggtitle("CUG test for the EI index for being a colonizer (reference model: Erdös-Renyi)")+
theme_minimal()
erdos_ei_p <- sum(unlist(erdosgraphs_gold) <= gold_ei)/1000
erdos_new_p <- sum(unlist(erdosgraphs_is_colonizer) <= is_colonizer_ei)/1000
erdos_ei_p
erdos_ei_gold <- sum(unlist(erdosgraphs_gold) <= gold_ei)/1000
erdos_new_is_colonizer <- sum(unlist(erdosgraphs_is_colonizer) <= is_colonizer_ei)/1000
erdos_ei_p
erdos_ei_gold <- sum(unlist(erdosgraphs_gold) <= gold_ei)/1000
erdos_ei_is_colonizer <- sum(unlist(erdosgraphs_is_colonizer) <= is_colonizer_ei)/1000
erdos_ei_p
erdos_ei_is_colonizer
erdos_ei_gold <- sum(unlist(erdosgraphs_gold) <= gold_ei)/1000
erdos_ei_is_colonizer <- sum(unlist(erdosgraphs_is_colonizer) >= is_colonizer_ei)/1000
erdos_ei_p
erdos_ei_is_colonizer
continuousIndex <- function(adj, attribute){
corr_matrix <- cor(attribute)
#Note that here we replace diagonal elements with 0s since we are only interested in relationships between nodes
diag(corr_matrix) <- 0
#Now we calculate the weighted sum of correlations between connected nodes
sum_corr <- sum(adj * corr_matrix)
#Finally, we normalize the sum by the total number of connections
continuous_index <- sum_corr / sum(adj)
return(continuous_index)
}
cIndex <- function(adj, attribute){
corr_matrix <- cor(attribute)
#Note that here we replace diagonal elements with 0s since we are only interested in relationships between nodes
diag(corr_matrix) <- 0
#Now we calculate the weighted sum of correlations between connected nodes
sum_corr <- sum(adj * corr_matrix)
#Finally, we normalize the sum by the total number of connections
continuous_index <- sum_corr / sum(adj)
return(continuous_index)
}
rgdp_c_index <- cIndex(graph_adj, V(graph)$rgdp)
cIndex <- function(adj, attribute){
corr_matrix <- cor(attribute)
#Note that here we replace diagonal elements with 0s since we are only interested in relationships between nodes
diag(corr_matrix) <- 0
#Now we calculate the weighted sum of correlations between connected nodes
sum_corr <- sum(adj * corr_matrix)
#Finally, we normalize the sum by the total number of connections
continuous_index <- sum_corr / sum(adj)
return(continuous_index)
}
rgdp_c_index <- cIndex(graph_adj, V(graph)$rgdp)
cIndex <- function(adj, attribute){
corr_matrix <- cor(t(attribute))
#Note that here we replace diagonal elements with 0s since we are only interested in relationships between nodes
diag(corr_matrix) <- 0
#Now we calculate the weighted sum of correlations between connected nodes
sum_corr <- sum(adj * corr_matrix)
#Finally, we normalize the sum by the total number of connections
continuous_index <- sum_corr / sum(adj)
return(continuous_index)
}
rgdp_c_index <- cIndex(graph_adj, V(graph)$rgdp)
erdosgraphs_rgdp <- lapply(erdosadjs, FUN = function(x){return(cIndex(x,V(graph)$rgdp))})
rgdp_c_index
V(graph)$rgdp
corr_matrix <- cor(t(V(graph)$rgdp))
corr_matrix
V(graph)$rgdp
cIndex <- function(adj, attribute){
corr_matrix <- cor(attribute,attribute)
#Note that here we replace diagonal elements with 0s since we are only interested in relationships between nodes
diag(corr_matrix) <- 0
#Now we calculate the weighted sum of correlations between connected nodes
sum_corr <- sum(adj * corr_matrix)
#Finally, we normalize the sum by the total number of connections
continuous_index <- sum_corr / sum(adj)
return(continuous_index)
}
rgdp_c_index <- cIndex(graph_adj, V(graph)$rgdp)
cIndex <- function(adj, attribute){
corr_matrix <- cor(attribute,attribute)
#Note that here we replace diagonal elements with 0s since we are only interested in relationships between nodes
diag(corr_matrix) <- 0
#Now we calculate the weighted sum of correlations between connected nodes
sum_corr <- sum(adj * corr_matrix)
#Finally, we normalize the sum by the total number of connections
continuous_index <- sum_corr / sum(adj)
return(continuous_index)
}
rgdp_c_index <- cIndex(graph_adj, V(graph)$rgdp)
cor(V(graph)$rgdp,V(graph)$rgdp)
cIndex <- function(adj, attribute){
# Calculate pairwise absolute differences between attribute values
diffs <- abs(outer(attribute, attribute, "-"))
# Replace diagonal elements with 0s (since we are interested in relationships between nodes)
diag(diffs) <- 0
# Normalize the differences by the range of the attribute values
range_attr <- diff(range(attribute))
norm_diffs <- diffs / range_attr
# Calculate the weighted sum of normalized differences between connected nodes
sum_diffs <- sum(adj * norm_diffs)
# Normalize the sum by the total number of connections
continuous_index <- sum_diffs / sum(adj)
return(continuous_index)
}
rgdp_c_index <- cIndex(graph_adj, V(graph)$rgdp)
erdosgraphs_rgdp <- lapply(erdosadjs, FUN = function(x){return(cIndex(x,V(graph)$rgdp))})
rgdp_c_index
ggplot(data = data.frame(ei = unlist(erdosgraphs_rgdp ))) +
geom_histogram(aes(x=ei),binwidth = 0.005) +
geom_vline(aes(xintercept=rgdp_c_index), color="red")+
ggtitle("CUG test for the continous Index for real GDP (reference model: Erdös-Renyi)")+
theme_minimal()
erdos_cont_idx_rgdp <- sum(unlist(erdosgraphs_rgdp) >= rgdp_c_index)/1000
erdos_cont_idx_rgdp
